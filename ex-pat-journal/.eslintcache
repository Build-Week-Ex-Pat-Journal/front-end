[{"/Users/joshualovins/Documents/Lambda/unit3/build/front-end/ex-pat-journal/src/index.js":"1","/Users/joshualovins/Documents/Lambda/unit3/build/front-end/ex-pat-journal/src/App.js":"2","/Users/joshualovins/Documents/Lambda/unit3/build/front-end/ex-pat-journal/src/components/theme.js":"3","/Users/joshualovins/Documents/Lambda/unit3/build/front-end/ex-pat-journal/src/reducers/index.js":"4","/Users/joshualovins/Documents/Lambda/unit3/build/front-end/ex-pat-journal/src/components/PrivateRoute.js":"5","/Users/joshualovins/Documents/Lambda/unit3/build/front-end/ex-pat-journal/src/components/NavBar.js":"6","/Users/joshualovins/Documents/Lambda/unit3/build/front-end/ex-pat-journal/src/components/RegisterForm.js":"7","/Users/joshualovins/Documents/Lambda/unit3/build/front-end/ex-pat-journal/src/components/NewPostForm.js":"8","/Users/joshualovins/Documents/Lambda/unit3/build/front-end/ex-pat-journal/src/components/Posts.js":"9","/Users/joshualovins/Documents/Lambda/unit3/build/front-end/ex-pat-journal/src/components/LoginForm.js":"10","/Users/joshualovins/Documents/Lambda/unit3/build/front-end/ex-pat-journal/src/registerschema.js":"11","/Users/joshualovins/Documents/Lambda/unit3/build/front-end/ex-pat-journal/src/loginschema.js":"12","/Users/joshualovins/Documents/Lambda/unit3/build/front-end/ex-pat-journal/src/components/Post.js":"13","/Users/joshualovins/Documents/Lambda/unit3/build/front-end/ex-pat-journal/src/actions/index.js":"14","/Users/joshualovins/Documents/Lambda/unit3/build/front-end/ex-pat-journal/src/utils/axiosWithAuth.js":"15","/Users/joshualovins/Documents/Lambda/unit3/build/front-end/ex-pat-journal/src/components/MyPosts.js":"16","/Users/joshualovins/Documents/Lambda/unit3/build/front-end/ex-pat-journal/src/components/MyPost.js":"17"},{"size":664,"mtime":1609895570157,"results":"18","hashOfConfig":"19"},{"size":1173,"mtime":1609975022267,"results":"20","hashOfConfig":"19"},{"size":459,"mtime":1609895570155,"results":"21","hashOfConfig":"19"},{"size":2705,"mtime":1609995568299,"results":"22","hashOfConfig":"19"},{"size":431,"mtime":1609980428706,"results":"23","hashOfConfig":"19"},{"size":1746,"mtime":1609980214405,"results":"24","hashOfConfig":"19"},{"size":5932,"mtime":1609895570155,"results":"25","hashOfConfig":"19"},{"size":3327,"mtime":1609971688628,"results":"26","hashOfConfig":"19"},{"size":1754,"mtime":1609974094659,"results":"27","hashOfConfig":"19"},{"size":5113,"mtime":1609980526495,"results":"28","hashOfConfig":"19"},{"size":699,"mtime":1609783987576,"results":"29","hashOfConfig":"19"},{"size":332,"mtime":1609895570158,"results":"30","hashOfConfig":"19"},{"size":1318,"mtime":1609969085853,"results":"31","hashOfConfig":"19"},{"size":3406,"mtime":1609995228678,"results":"32","hashOfConfig":"19"},{"size":270,"mtime":1609801719495,"results":"33","hashOfConfig":"19"},{"size":1912,"mtime":1609978080797,"results":"34","hashOfConfig":"19"},{"size":4663,"mtime":1609994963951,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"d9mmez",{"filePath":"39","messages":"40","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"38"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"38"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"38"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"38"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"38"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"38"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/joshualovins/Documents/Lambda/unit3/build/front-end/ex-pat-journal/src/index.js",[],["77","78"],"/Users/joshualovins/Documents/Lambda/unit3/build/front-end/ex-pat-journal/src/App.js",["79","80","81","82"],"import './App.css';\nimport React,  { useState, useEffect} from 'react'; \n\n\nimport Posts from './components/Posts';\nimport LoginForm from './components/LoginForm';\nimport RegisterForm from './components/RegisterForm';\nimport NavBar from './components/NavBar';\nimport PrivateRoute from \"./components/PrivateRoute\";\nimport NewPostForm from \"./components/NewPostForm\";\n\nimport axios from 'axios';\n\nimport { BrowserRouter as Router, Route, Link, Switch } from \"react-router-dom\";\nimport MyPosts from './components/MyPosts';\n\nfunction App() {\n\n  return (\n  <div>\n    <h1>Ex-Pat Journal</h1>\n    <Router>\n      <NavBar />\n      <Switch>\n        <Route exact path=\"/\" component={LoginForm} />\n        <Route exact path=\"/register\" component={RegisterForm} />\n        <PrivateRoute path=\"/all-posts\" component={Posts} />\n        <PrivateRoute path=\"/new-post\" component={NewPostForm} />\n        {/* <PrivateRoute path=\"/my-posts\" component={MyPosts} /> */}\n{/*  /:userid/posts\n */}\n        <PrivateRoute path=\"/my-posts\" component={MyPosts} />\n        {/* <PrivateRoute path=\"/posts/:id\" component={MyPosts} /> */}\n      </Switch>\n    </Router>\n  </div>\n  );\n}\n\nexport default App;\n","/Users/joshualovins/Documents/Lambda/unit3/build/front-end/ex-pat-journal/src/components/theme.js",[],"/Users/joshualovins/Documents/Lambda/unit3/build/front-end/ex-pat-journal/src/reducers/index.js",[],"/Users/joshualovins/Documents/Lambda/unit3/build/front-end/ex-pat-journal/src/components/PrivateRoute.js",[],"/Users/joshualovins/Documents/Lambda/unit3/build/front-end/ex-pat-journal/src/components/NavBar.js",[],"/Users/joshualovins/Documents/Lambda/unit3/build/front-end/ex-pat-journal/src/components/RegisterForm.js",["83"],"import React, { useState, useEffect } from \"react\";\nimport Posts from \"./Posts\";\nimport axios from \"axios\";\nimport * as yup from \"yup\";\nimport registerschema from \"../registerschema\";\nimport styled from \"styled-components\";\n\nconst initialRegisterFormValues = {\n  fname: \"\",\n  lname: \"\",\n  email: \"\",\n  username: \"\",\n  password: \"\",\n  confirmPassword: \"\",\n};\n\nconst initialRegisterErrors = {\n  fname: \"\",\n  lname: \"\",\n  email: \"\",\n  username: \"\",\n  password: \"\",\n  confirmPassword: \"\",\n};\n\nconst initialRegisterDisabled = true;\n\nfunction RegisterForm(props) {\n  //////////////// STATES ////////////////\n  const [registerDisabled, setRegisterDisabled] = useState(\n    initialRegisterDisabled\n  );\n  const [registerErrors, setRegisterErrors] = useState(initialRegisterErrors);\n  const [registerFormValues, setRegisterFormValues] = useState(\n    initialRegisterFormValues\n  );\n\n  //////////////// EVENT HANDLERS ////////////////\n\n  const registerInputChange = (name, value) => {\n    yup\n      .reach(registerschema, name)\n      .validate(value) // validate this value\n      .then(() => {\n        // happy path and clear the error\n        setRegisterErrors({\n          ...registerErrors,\n          [name]: \"\",\n        });\n      })\n      // if the validation is unsuccessful, we can set the error message to the message\n      // returned from yup (that we created in our schema)\n      .catch((err) => {\n        setRegisterErrors({\n          ...registerErrors,\n          // validation error from schema\n          [name]: err.errors[0],\n        });\n      });\n\n    setRegisterFormValues({\n      ...registerFormValues,\n      [name]: value, // NOT AN ARRAY\n    });\n  };\n\n  const onChange = (evt) => {\n    const { name, value } = evt.target;\n    registerInputChange(name, value);\n  };\n\n  const register = (e) => {\n    e.preventDefault();\n\n    // Because backend is not currently built to hold\n    // fname, lname, and email, as of 1/4/21\n    const abbreviatedRegistrationCredentials = {\n      username: registerFormValues.username,\n      password: registerFormValues.password,\n    };\n    console.log(abbreviatedRegistrationCredentials);\n\n    axios\n      .post(\n        \"https://expatjournal2021.herokuapp.com/api/register\",\n        abbreviatedRegistrationCredentials\n      )\n      .then((res) => {\n        console.log(res);\n        props.history.push(\"/\");\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n\n  //////////////// SIDE EFFECTS ////////////////\n\n  useEffect(() => {\n    registerschema.isValid(registerFormValues).then((valid) => {\n      setRegisterDisabled(!valid);\n    });\n  }, [registerFormValues]);\n\n  return (\n    <StyledRegister>\n      <div className=\"Form\">\n        <div style={{ color: \"red\" }} className=\"errors\">\n          {registerErrors.fname}\n          <br />\n          {registerErrors.lname}\n          <br />\n          {registerErrors.email}\n          <br />\n          {registerErrors.username}\n          <br />\n          {registerErrors.password}\n          <br />\n          {registerErrors.confirmPassword}\n          <br />\n        </div>\n        <form className=\"form container\" onSubmit={register}>\n          <h1>Registration</h1>\n          <label className=\"name\">\n            First Name:\n            <input\n              value={registerFormValues.fname}\n              onChange={onChange}\n              name=\"fname\"\n              type=\"text\"\n            />\n          </label>\n\n          <label className=\"name\">\n            Last Name:\n            <input\n              value={registerFormValues.lname}\n              onChange={onChange}\n              name=\"lname\"\n              type=\"text\"\n            />\n          </label>\n\n          <label className=\"name\">\n            Email:\n            <input\n              value={registerFormValues.email}\n              onChange={onChange}\n              name=\"email\"\n              type=\"text\"\n            />\n          </label>\n\n          <label className=\"name\">\n            Username:\n            <input\n              value={registerFormValues.username}\n              onChange={onChange}\n              name=\"username\"\n              type=\"text\"\n            />\n          </label>\n\n          <label className=\"name\">\n            Password:\n            <input\n              value={registerFormValues.password}\n              onChange={onChange}\n              name=\"password\"\n              type=\"password\"\n            />\n          </label>\n\n          <label className=\"name\">\n            Confirm Password:\n            <input\n              value={registerFormValues.confirmPassword}\n              onChange={onChange}\n              name=\"confirmPassword\"\n              type=\"password\"\n            />\n          </label>\n\n          <button className=\"loginButton\" disabled={registerDisabled}>\n            register\n          </button>\n        </form>\n      </div>\n    </StyledRegister>\n  );\n}\n\nexport default RegisterForm;\n\nconst StyledRegister = styled.div`\n  background-color: ${(pr) => pr.theme.backColor};\n  .container {\n    color: ${(pr) => pr.theme.textColor};\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-content: center;\n    border: black solid 2px;\n    background-color: #f0f8ff;\n    width: 95%;\n    margin: 0 auto;\n  }\n  .errors {\n    text-align: center;\n    text-decoration: underline;\n    line-height: 20px;\n    font-weight: 500;\n  }\n  h1 {\n    text-align: center;\n    text-decoration: underline;\n    color: ${(pr) => pr.theme.titleColor};\n    font-size: 5em;\n  }\n  .name {\n    display: flex;\n    justify-content: space-between;\n    margin: 2% auto;\n    width: 50%;\n    text-align: center;\n  }\n  button {\n    background-color: ${(pr) => pr.theme.btnColor};\n    padding: ${(pr) => pr.theme.padding.medium};\n    width: ${(pr) => pr.theme.width.small};\n    margin: 1% auto;\n    &:hover {\n      background-color: ${(pr) => pr.theme.secondBtnColor};\n    } /* hover closed */\n  } /* button closed*/\n`; //stylist closed\n","/Users/joshualovins/Documents/Lambda/unit3/build/front-end/ex-pat-journal/src/components/NewPostForm.js",["84","85","86","87","88"],"import React,  { useState, useEffect} from 'react'; \nimport Posts from './Posts';\nimport axios from 'axios';\nimport * as yup from 'yup';\nimport registerschema from '../registerschema'\n\nimport { addPost } from './../actions';\nimport { connect } from 'react-redux';\n\n// ****** Most of the comments in this file pertain to the various\n// methods for checking that story is not empty. I think probably the simplest\n// method would be just to disable the button if it's an empty string. ******\n// ****** Also notable about the form below: currently it is designed to accept\n// image as STRING. Ultimately, for the stretch, we're planning to try to figure \n// out how to make it accept an image upload. To that end, we will likely have to\n// change this form (and a few other stations at which newPost stops on its way\n// to state) significantly. ******\n\nconst initialFormValues = {\n    image: \"\",\n    story: \"\"\n}\n  \n//   const initialFormErrors = {\n//     image: \"\",\n//     story: \"\"\n//   }\n  \n// const initialDisabled = true;\n\n\nfunction NewPostForm(props) {\n\n  const [formValues, setFormValues] = useState(initialFormValues);\n  \n  const onChange = (evt) => {\n    const { name, value } = evt.target;\n\n    setFormValues({\n      ...formValues,\n      [name]: value\n    });\n  }\n\n  const onSubmit = e => {\n      e.preventDefault();\n  //   const image = formValues.image;\n  //   const story = formValues.story;\n\n  //   const newPost =\n\n  //   addPost(props.currentUsername, image, story);\n      \n      const newPost = {\n          user_id: props.currentUsername,\n          ...formValues\n      }\n      console.log(newPost);\n      props.addPost(newPost);\n      props.history.push(\"/all-posts\");\n\n      // if (formValues.story){\n      //     const newPost = {\n      //         username: props.currentUsername,\n      //         ...formValues\n      //     }\n      //     console.log(newPost);\n      //     addPost(newPost);\n      // } else {\n      //     console.log(\"Story required field\")\n      // }\n  }\n  \n  return(\n      <div className=\"Form\">\n        {/* <div style={{\"color\": \"red\"}} className=\"errors\">\n          {registerErrors.fname}<br/>\n          {registerErrors.lname}<br/>\n          {registerErrors.email}<br/>  \n          {registerErrors.username}<br/>\n          {registerErrors.password}<br/>\n          {registerErrors.confirmPassword}<br/>\n        </div> */}\n        <form className=\"form container\" onSubmit={onSubmit}>\n          <label>\n            Image url: \n            {/* CHANGE THIS FORM WHEN WE DO IT FOR IMAGES: */}\n            <input\n              value={formValues.image}\n              onChange={onChange}\n              name=\"image\"\n              type=\"text\"\n            />\n          </label>\n          <br />\n\n          <label>\n            Story: \n            <input\n              value={formValues.story}\n              onChange={onChange}\n              name=\"story\"\n              type=\"text\"\n            />\n          </label>\n          <br />\n\n{/* disabled={disabled} */}\n          <button>Post</button>\n          {/* <button className=\"loginButton\" disabled={registerDisabled}>register\n          </button> */}\n        </form>\n    </div>\n  )\n}\n\nconst mapStateToProps = state => {\n    return {\n        currentUsername: state.currentUsername\n    }\n};\n\nexport default connect(mapStateToProps, {addPost})(NewPostForm);","/Users/joshualovins/Documents/Lambda/unit3/build/front-end/ex-pat-journal/src/components/Posts.js",["89","90","91"],"import React, { useState, useEffect } from 'react';\nimport Post from './Post';\nimport { connect } from 'react-redux';\nimport styled from 'styled-components'\n\n// import {  fetchAllPosts, addPost, setCurrentUsername } from './../actions';\n\nimport { fetchAllPosts } from './../actions';\n\n//////////////// INITIAL STATES ////////////////\n\nfunction Posts(props) {\n    console.log(props)\n    // const { fetchAllPosts } = props;\n\n    useEffect(() => {\n        props.fetchAllPosts();\n            // .then(res => {\n            //     console.log(res);\n\n            // })\n    }, [])\n\n\n///// STYLING ////////    \n    const PostsWrapper = styled.div`\n    display: flex;\n    flex-direction: row;\n    flex-wrap: wrap;    \n    `\n    const PageWrapper = styled.div`\n    width: 100%;\n    h2 {\n        margin-left:5%;\n    }\n    `\n\n    return(\n        <PageWrapper>\n            <h2>All Posts:</h2>\n            <PostsWrapper>\n            {\n                props.isLoading ? (<div>Loading</div>) \n                : (props.allPosts.map((post, id) => (\n                    <Post key={id} post={post}/>\n                )))  \n            }\n            </PostsWrapper>\n        </PageWrapper>\n    )\n}\n\nconst mapStateToProps = state => {\n    return {\n        isLoading: state.isLoading,\n        allPosts: state.allPosts\n    }\n};\n\nexport default connect(mapStateToProps, {fetchAllPosts})(Posts);\n\n// {\n//     allPosts: [\n//         {\n//             username: \"\",\n//             photo: \"\",\n//             story: \"\"\n//         }\n//     ]\n// }\n\n\n// export default Posts;\n\n{/* <Posts currentUser={currentUser} setCurrentUser={setCurrentUser} currentPost={currentPost} setCurrentPost={setCurrentPost} posts={posts} setPosts={setPosts} userList={userList} setUserList={setUserList}/>  */}\n","/Users/joshualovins/Documents/Lambda/unit3/build/front-end/ex-pat-journal/src/components/LoginForm.js",[],"/Users/joshualovins/Documents/Lambda/unit3/build/front-end/ex-pat-journal/src/registerschema.js",[],"/Users/joshualovins/Documents/Lambda/unit3/build/front-end/ex-pat-journal/src/loginschema.js",[],"/Users/joshualovins/Documents/Lambda/unit3/build/front-end/ex-pat-journal/src/components/Post.js",["92"],"import React, { useState } from \"react\";\nimport styled from 'styled-components'\n\nconst initialIsEditing = false;\n\nfunction Post(props){\n    const [isEditing, setIsEditing] = useState(initialIsEditing)\n    const {post, id} = props\n\n\n    const PostWrapper = styled.div`\n    border: 2px solid black;\n    box-shadow: 5px 10px #888888;\n    margin: 5% auto;\n    width: 30%;\n    border-radius:10px;\n    @media (max-width: 1800px) {\n        margin: 5% auto;\n        width: 40%;\n    }\n    @media (max-width: 1300px) {\n        margin: 5% auto;\n        width: 80%;\n    }\n    `\n    const ImgWrapper = styled.div`\n    width: 90%;\n    text-align: center;\n    margin: 2% auto;\n    `\n    const TextContentWrapper = styled.div`\n    padding-right: 5%;\n    padding-left: 5%;`\n\n    return(\n        isEditing ? <p>A Post Form</p> \n        \n        :\n                    <PostWrapper key={id} className='post-card'>\n                        <ImgWrapper>\n                            <img src={post.image} alt=\"uploaded\" style={{maxWidth: \"100%\"}}/>\n                        </ImgWrapper>\n                        <TextContentWrapper>\n                            <h4>{post.user_id}</h4>\n                            <p>{post.story}</p>\n                        </TextContentWrapper>\n                    </PostWrapper>\n    )\n}\n\nexport default Post;","/Users/joshualovins/Documents/Lambda/unit3/build/front-end/ex-pat-journal/src/actions/index.js",["93"],"/Users/joshualovins/Documents/Lambda/unit3/build/front-end/ex-pat-journal/src/utils/axiosWithAuth.js",[],"/Users/joshualovins/Documents/Lambda/unit3/build/front-end/ex-pat-journal/src/components/MyPosts.js",["94","95","96"],"import React, { useState, useEffect } from 'react';\nimport MyPost from './MyPost';\nimport { connect } from 'react-redux';\nimport styled from 'styled-components'\n\n// import {  fetchMyPosts, editPost, fetchAllPosts, addPost, setCurrentUsername } from './../actions';\n\nimport { fetchAllPosts } from './../actions';\n\n//////////////// INITIAL STATES ////////////////\n\nfunction MyPosts(props) {\n    // console.log(props)\n\n    useEffect(() => {\n        props.fetchAllPosts();\n\n        // props.fetchMyPosts(props.currentUsername);\n    }, [])\n\n\n///// STYLING ////////    \n    const PostsWrapper = styled.div`\n    display: flex;\n    flex-direction: row;\n    flex-wrap: wrap;    \n    `\n    const PageWrapper = styled.div`\n    width: 100%;\n    h2 {\n        margin-left:5%;\n    }\n    `\n\n    return(\n        <PageWrapper>\n            <h2>My Posts:</h2>\n            <PostsWrapper>\n            {\n                props.isLoading ? (<div>Loading</div>) \n                : (props.allPosts.map((post, idx) => (\n                    // <MyPost key={id} post={post}/>\n                    post.user_id === props.currentUsername ? \n                    <MyPost key={idx} post={post}/>\n                    : null\n                )))  \n            }\n            </PostsWrapper>\n        </PageWrapper>\n    )\n}\n\nconst mapStateToProps = state => {\n    return {\n        isLoading: state.isLoading,\n        allPosts: state.allPosts,\n        currentUsername: state.currentUsername\n    }\n};\n\nexport default connect(mapStateToProps, {fetchAllPosts})(MyPosts);\n\n// {\n//     allPosts: [\n//         {\n//             username: \"\",\n//             photo: \"\",\n//             story: \"\"\n//         }\n//     ]\n// }\n\n\n// export default Posts;\n\n{/* <Posts currentUser={currentUser} setCurrentUser={setCurrentUser} currentPost={currentPost} setCurrentPost={setCurrentPost} posts={posts} setPosts={setPosts} userList={userList} setUserList={setUserList}/>  */}\n","/Users/joshualovins/Documents/Lambda/unit3/build/front-end/ex-pat-journal/src/components/MyPost.js",["97","98","99"],{"ruleId":"100","replacedBy":"101"},{"ruleId":"102","replacedBy":"103"},{"ruleId":"104","severity":1,"message":"105","line":2,"column":18,"nodeType":"106","messageId":"107","endLine":2,"endColumn":26},{"ruleId":"104","severity":1,"message":"108","line":2,"column":28,"nodeType":"106","messageId":"107","endLine":2,"endColumn":37},{"ruleId":"104","severity":1,"message":"109","line":12,"column":8,"nodeType":"106","messageId":"107","endLine":12,"endColumn":13},{"ruleId":"104","severity":1,"message":"110","line":14,"column":42,"nodeType":"106","messageId":"107","endLine":14,"endColumn":46},{"ruleId":"104","severity":1,"message":"111","line":2,"column":8,"nodeType":"106","messageId":"107","endLine":2,"endColumn":13},{"ruleId":"104","severity":1,"message":"108","line":1,"column":28,"nodeType":"106","messageId":"107","endLine":1,"endColumn":37},{"ruleId":"104","severity":1,"message":"111","line":2,"column":8,"nodeType":"106","messageId":"107","endLine":2,"endColumn":13},{"ruleId":"104","severity":1,"message":"109","line":3,"column":8,"nodeType":"106","messageId":"107","endLine":3,"endColumn":13},{"ruleId":"104","severity":1,"message":"112","line":4,"column":13,"nodeType":"106","messageId":"107","endLine":4,"endColumn":16},{"ruleId":"104","severity":1,"message":"113","line":5,"column":8,"nodeType":"106","messageId":"107","endLine":5,"endColumn":22},{"ruleId":"104","severity":1,"message":"105","line":1,"column":17,"nodeType":"106","messageId":"107","endLine":1,"endColumn":25},{"ruleId":"114","severity":1,"message":"115","line":22,"column":8,"nodeType":"116","endLine":22,"endColumn":10,"suggestions":"117"},{"ruleId":"118","severity":1,"message":"119","line":75,"column":1,"nodeType":"120","messageId":"121","endLine":75,"endColumn":214},{"ruleId":"104","severity":1,"message":"122","line":7,"column":23,"nodeType":"106","messageId":"107","endLine":7,"endColumn":35},{"ruleId":"104","severity":1,"message":"109","line":1,"column":8,"nodeType":"106","messageId":"107","endLine":1,"endColumn":13},{"ruleId":"104","severity":1,"message":"105","line":1,"column":17,"nodeType":"106","messageId":"107","endLine":1,"endColumn":25},{"ruleId":"114","severity":1,"message":"115","line":19,"column":8,"nodeType":"116","endLine":19,"endColumn":10,"suggestions":"123"},{"ruleId":"118","severity":1,"message":"119","line":76,"column":1,"nodeType":"120","messageId":"121","endLine":76,"endColumn":214},{"ruleId":"104","severity":1,"message":"124","line":4,"column":10,"nodeType":"106","messageId":"107","endLine":4,"endColumn":23},{"ruleId":"104","severity":1,"message":"125","line":5,"column":21,"nodeType":"106","messageId":"107","endLine":5,"endColumn":31},{"ruleId":"104","severity":1,"message":"126","line":21,"column":13,"nodeType":"106","messageId":"107","endLine":21,"endColumn":15},"no-native-reassign",["127"],"no-negated-in-lhs",["128"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'axios' is defined but never used.","'Link' is defined but never used.","'Posts' is defined but never used.","'yup' is defined but never used.","'registerschema' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["129"],"no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock","'setIsEditing' is assigned a value but never used.",["130"],"'axiosWithAuth' is defined but never used.","'useHistory' is defined but never used.","'id' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"131","fix":"132"},{"desc":"131","fix":"133"},"Update the dependencies array to be: [props]",{"range":"134","text":"135"},{"range":"136","text":"135"},[569,571],"[props]",[531,533]]