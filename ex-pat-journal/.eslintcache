[{"/Users/mmurph917/Desktop/front-end/ex-pat-journal/src/index.js":"1","/Users/mmurph917/Desktop/front-end/ex-pat-journal/src/App.js":"2","/Users/mmurph917/Desktop/front-end/ex-pat-journal/src/reducers/index.js":"3","/Users/mmurph917/Desktop/front-end/ex-pat-journal/src/components/Posts.js":"4","/Users/mmurph917/Desktop/front-end/ex-pat-journal/src/components/LoginForm.js":"5","/Users/mmurph917/Desktop/front-end/ex-pat-journal/src/components/RegisterForm.js":"6","/Users/mmurph917/Desktop/front-end/ex-pat-journal/src/components/NavBar.js":"7","/Users/mmurph917/Desktop/front-end/ex-pat-journal/src/components/PrivateRoute.js":"8","/Users/mmurph917/Desktop/front-end/ex-pat-journal/src/components/NewPostForm.js":"9","/Users/mmurph917/Desktop/front-end/ex-pat-journal/src/components/Post.js":"10","/Users/mmurph917/Desktop/front-end/ex-pat-journal/src/loginschema.js":"11","/Users/mmurph917/Desktop/front-end/ex-pat-journal/src/registerschema.js":"12","/Users/mmurph917/Desktop/front-end/ex-pat-journal/src/actions/index.js":"13","/Users/mmurph917/Desktop/front-end/ex-pat-journal/src/utils/axiosWithAuth.js":"14"},{"size":517,"mtime":1609858877098,"results":"15","hashOfConfig":"16"},{"size":901,"mtime":1609858877096,"results":"17","hashOfConfig":"16"},{"size":1768,"mtime":1609858877099,"results":"18","hashOfConfig":"16"},{"size":2694,"mtime":1609878587567,"results":"19","hashOfConfig":"16"},{"size":3728,"mtime":1609858877096,"results":"20","hashOfConfig":"16"},{"size":4676,"mtime":1609858877098,"results":"21","hashOfConfig":"16"},{"size":1952,"mtime":1609858877096,"results":"22","hashOfConfig":"16"},{"size":431,"mtime":1609858877097,"results":"23","hashOfConfig":"16"},{"size":3327,"mtime":1609858877097,"results":"24","hashOfConfig":"16"},{"size":289,"mtime":1609858877097,"results":"25","hashOfConfig":"16"},{"size":282,"mtime":1609858877098,"results":"26","hashOfConfig":"16"},{"size":699,"mtime":1609858877099,"results":"27","hashOfConfig":"16"},{"size":2006,"mtime":1609858877096,"results":"28","hashOfConfig":"16"},{"size":270,"mtime":1609858877100,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"kzcay4",{"filePath":"33","messages":"34","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"32"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"32"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"32"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"32"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"32"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"32"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"/Users/mmurph917/Desktop/front-end/ex-pat-journal/src/index.js",[],["65","66"],"/Users/mmurph917/Desktop/front-end/ex-pat-journal/src/App.js",["67","68","69","70"],"import './App.css';\nimport React,  { useState, useEffect} from 'react'; \n\n\nimport Posts from './components/Posts';\nimport LoginForm from './components/LoginForm';\nimport RegisterForm from './components/RegisterForm';\nimport NavBar from './components/NavBar';\nimport PrivateRoute from \"./components/PrivateRoute\";\nimport NewPostForm from \"./components/NewPostForm\";\n\nimport axios from 'axios';\n\nimport { BrowserRouter as Router, Route, Link, Switch } from \"react-router-dom\";\n\nfunction App() {\n\n  return (\n  <div>\n    <h1>Ex-Pat Journal</h1>\n    <Router>\n      <NavBar />\n      <Switch>\n        <Route exact path=\"/\" component={LoginForm} />\n        <Route exact path=\"/register\" component={RegisterForm} />\n        <PrivateRoute path=\"/all-posts\" component={Posts} />\n        <PrivateRoute path=\"/new-post\" component={NewPostForm} />\n      </Switch>\n    </Router>\n  </div>\n  );\n}\n\nexport default App;\n","/Users/mmurph917/Desktop/front-end/ex-pat-journal/src/reducers/index.js",[],"/Users/mmurph917/Desktop/front-end/ex-pat-journal/src/components/Posts.js",["71","72","73","74"],"/Users/mmurph917/Desktop/front-end/ex-pat-journal/src/components/LoginForm.js",["75"],"import React,  { useState, useEffect} from 'react'; \nimport Posts from './Posts';\nimport axios from 'axios';\nimport * as yup from 'yup';\nimport loginschema from '../loginschema';\n\nimport { setCurrentUsername } from './../actions';\nimport { connect } from 'react-redux';\n\nconst initialLoginFormValues = {\n  username: '',\n  password: ''\n}\n  \nconst initialLoginErrors = {\n  username: '',\n  password: '',\n}\n\n  const initialLoginDisabled = true;\n  \n\nfunction LoginForm(props) {\n    //////////////// STATES //////////////// \n    const [loginDisabled, setLoginDisabled] = useState(initialLoginDisabled);\n    const [loginErrors, setLoginErrors] = useState(initialLoginErrors);\n    const [loginFormValues, setLoginFormValues] = useState(initialLoginFormValues);\n    \n    //////////////// EVENT HANDLERS ////////////////\n    const loginInputChange = (name, value) => {\n      yup\n      .reach(loginschema, name)\n      .validate(value) // validate this value\n         .then(() => {\n           // happy path and clear the error\n           setLoginErrors({\n             ...loginErrors,\n             [name]: \"\",\n           });\n         })\n         // if the validation is unsuccessful, we can set the error message to the message\n         // returned from yup (that we created in our schema)\n         .catch((err) => {\n           setLoginErrors({\n             ...loginErrors,\n             // validation error from schema\n             [name]: err.errors[0],\n           });\n         });\n    \n         setLoginFormValues({\n           ...loginFormValues,\n           [name]: value, // NOT AN ARRAY\n         });\n    }\n    \n    const onChange = (evt) => {\n      const { name, value } = evt.target;\n      loginInputChange(name, value)\n    }\n\n\n    const login = e => {\n      e.preventDefault();\n\n      const credentialsTest = loginFormValues;\n\n      console.log(credentialsTest);\n\n      axios\n        .post(\"https://expatjournal2021.herokuapp.com/api/login\", credentialsTest)\n        .then((res) => {\n          localStorage.setItem(\"token\", res.data);\n          props.setCurrentUsername(credentialsTest.username);\n\n          console.log(props.currentUsername);\n\n          props.history.push('/all-posts');\n        })\n        .catch(err => {\n          console.log(err);\n        });\n    }\n    \n    useEffect(() => {\n      loginschema.isValid(loginFormValues).then((valid) => {\n        setLoginDisabled(!valid);\n      });\n    }, [loginFormValues]);  \n    \n      return(\n      <div className= \"Form\">\n          <div className=\"errors\" style={{\"color\":\"red\"}}>\n            {loginErrors.username}<br/>\n            {loginErrors.password}<br/>\n          </div>\n          <form className = \"form container\" onSubmit={login}>\n            <label>\n              Username: \n              <input\n                value={loginFormValues.username}\n                onChange={onChange}\n                name=\"username\"\n                type=\"text\"\n              />\n            </label>\n            <label>\n              Password: \n              <input\n                value={loginFormValues.password}\n                onChange={onChange}\n                name=\"password\"\n                type=\"text\"\n              />\n            </label>\n            <button className=\"loginButton\" disabled={loginDisabled}>login</button>\n            {/* clicking sign-up button should trigger route to Register Form */}\n          </form>\n          <div>\n            <p>No account yet?</p>\n            <button onClick={() => props.history.push('/register')}>Register</button>\n          </div>\n      </div>\n      )\n    }\n\nconst mapStateToProps = state => {\n  return {\n      currentUsername: state.currentUsername\n  }\n};\n\nexport default connect(mapStateToProps, {setCurrentUsername})(LoginForm);","/Users/mmurph917/Desktop/front-end/ex-pat-journal/src/components/RegisterForm.js",["76"],"import React,  { useState, useEffect} from 'react'; \nimport Posts from './Posts';\nimport axios from 'axios';\nimport * as yup from 'yup';\nimport registerschema from '../registerschema'\n\nconst initialRegisterFormValues = {\n    fname: '',\n    lname: '',\n    email: '',\n    username: '',\n    password: '',\n    confirmPassword: ''\n  }\n  \n  const initialRegisterErrors = {\n    fname: '',\n    lname: '',\n    email: '',\n    username: '',\n    password: '',\n    confirmPassword: ''\n  }\n  \n  const initialRegisterDisabled = true;\n\n\nfunction RegisterForm(props) {\n  //////////////// STATES //////////////// \n  const [registerDisabled, setRegisterDisabled] = useState(initialRegisterDisabled);\n  const [registerErrors, setRegisterErrors] = useState(initialRegisterErrors)\n  const [registerFormValues, setRegisterFormValues] = useState(initialRegisterFormValues)\n  \n    //////////////// EVENT HANDLERS ////////////////\n  \n  const registerInputChange = (name, value) => {\n  yup\n  .reach(registerschema, name)\n  .validate(value) // validate this value\n      .then(() => {\n        // happy path and clear the error\n        setRegisterErrors({\n          ...registerErrors,\n          [name]: \"\",\n        });\n      })\n      // if the validation is unsuccessful, we can set the error message to the message\n      // returned from yup (that we created in our schema)\n      .catch((err) => {\n        setRegisterErrors({\n          ...registerErrors,\n          // validation error from schema\n          [name]: err.errors[0],\n        });\n      });\n\n      setRegisterFormValues({\n        ...registerFormValues,\n        [name]: value, // NOT AN ARRAY\n      });\n  }\n  \n  const onChange = (evt) => {\n    const { name, value } = evt.target;\n    registerInputChange(name, value)\n  }\n\n  const register = e => {\n    e.preventDefault();\n\n    // Because backend is not currently built to hold\n    // fname, lname, and email, as of 1/4/21\n    const abbreviatedRegistrationCredentials = {\n      username: registerFormValues.username,\n      password: registerFormValues.password\n    }\n    console.log(abbreviatedRegistrationCredentials);\n\n    axios\n      .post(\"https://expatjournal2021.herokuapp.com/api/register\", abbreviatedRegistrationCredentials)\n      .then((res) => {\n        console.log(res);\n        props.history.push('/');\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  }\n  \n  //////////////// SIDE EFFECTS ////////////////\n  \n  useEffect(() => {\n    registerschema.isValid(registerFormValues).then((valid) => {\n      setRegisterDisabled(!valid);\n    });\n  }, [registerFormValues]);\n\n  return(\n      <div className= \"Form\">\n        <div style={{\"color\": \"red\"}} className=\"errors\">\n          {registerErrors.fname}<br/>\n          {registerErrors.lname}<br/>\n          {registerErrors.email}<br/>  \n          {registerErrors.username}<br/>\n          {registerErrors.password}<br/>\n          {registerErrors.confirmPassword}<br/>\n        </div>\n        <form className=\"form container\" onSubmit={register}>\n          <label>\n            First Name: \n            <input\n              value={registerFormValues.fname}\n              onChange={onChange}\n              name=\"fname\"\n              type=\"text\"\n            />\n          </label>\n          <br />\n\n          <label>\n            Last Name: \n            <input\n              value={registerFormValues.lname}\n              onChange={onChange}\n              name=\"lname\"\n              type=\"text\"\n            />\n          </label>\n          <br />\n\n          <label>\n            Email: \n            <input\n              value={registerFormValues.email}\n              onChange={onChange}\n              name=\"email\"\n              type=\"text\"\n            />\n          </label>\n          <br />\n\n          <label>\n            Username: \n            <input\n              value={registerFormValues.username}\n              onChange={onChange}\n              name=\"username\"\n              type=\"text\"\n            />\n          </label>\n          <br />\n          <label>\n            Password: \n            <input\n              value={registerFormValues.password}\n              onChange={onChange}\n              name=\"password\"\n              type=\"text\"\n            />\n          </label>\n          <br />\n\n          <label>\n            Confirm Password: \n            <input\n              value={registerFormValues.confirmPassword}\n              onChange={onChange}\n              name=\"confirmPassword\"\n              type=\"text\"\n            />\n          </label>\n          <br />\n\n          <button className=\"loginButton\" disabled={registerDisabled}>register\n          </button>\n        </form>\n    </div>\n  )\n}\n\nexport default RegisterForm;","/Users/mmurph917/Desktop/front-end/ex-pat-journal/src/components/NavBar.js",[],"/Users/mmurph917/Desktop/front-end/ex-pat-journal/src/components/PrivateRoute.js",[],"/Users/mmurph917/Desktop/front-end/ex-pat-journal/src/components/NewPostForm.js",["77","78","79","80","81"],"import React,  { useState, useEffect} from 'react'; \nimport Posts from './Posts';\nimport axios from 'axios';\nimport * as yup from 'yup';\nimport registerschema from '../registerschema'\n\nimport { addPost } from './../actions';\nimport { connect } from 'react-redux';\n\n// ****** Most of the comments in this file pertain to the various\n// methods for checking that story is not empty. I think probably the simplest\n// method would be just to disable the button if it's an empty string. ******\n// ****** Also notable about the form below: currently it is designed to accept\n// image as STRING. Ultimately, for the stretch, we're planning to try to figure \n// out how to make it accept an image upload. To that end, we will likely have to\n// change this form (and a few other stations at which newPost stops on its way\n// to state) significantly. ******\n\nconst initialFormValues = {\n    image: \"\",\n    story: \"\"\n}\n  \n//   const initialFormErrors = {\n//     image: \"\",\n//     story: \"\"\n//   }\n  \n// const initialDisabled = true;\n\n\nfunction NewPostForm(props) {\n\n  const [formValues, setFormValues] = useState(initialFormValues);\n  \n  const onChange = (evt) => {\n    const { name, value } = evt.target;\n\n    setFormValues({\n      ...formValues,\n      [name]: value\n    });\n  }\n\n  const onSubmit = e => {\n      e.preventDefault();\n  //   const image = formValues.image;\n  //   const story = formValues.story;\n\n  //   const newPost =\n\n  //   addPost(props.currentUsername, image, story);\n      \n      const newPost = {\n          user_id: props.currentUsername,\n          ...formValues\n      }\n      console.log(newPost);\n      props.addPost(newPost);\n      props.history.push(\"/all-posts\");\n\n      // if (formValues.story){\n      //     const newPost = {\n      //         username: props.currentUsername,\n      //         ...formValues\n      //     }\n      //     console.log(newPost);\n      //     addPost(newPost);\n      // } else {\n      //     console.log(\"Story required field\")\n      // }\n  }\n  \n  return(\n      <div className=\"Form\">\n        {/* <div style={{\"color\": \"red\"}} className=\"errors\">\n          {registerErrors.fname}<br/>\n          {registerErrors.lname}<br/>\n          {registerErrors.email}<br/>  \n          {registerErrors.username}<br/>\n          {registerErrors.password}<br/>\n          {registerErrors.confirmPassword}<br/>\n        </div> */}\n        <form className=\"form container\" onSubmit={onSubmit}>\n          <label>\n            Image url: \n            {/* CHANGE THIS FORM WHEN WE DO IT FOR IMAGES: */}\n            <input\n              value={formValues.image}\n              onChange={onChange}\n              name=\"image\"\n              type=\"text\"\n            />\n          </label>\n          <br />\n\n          <label>\n            Story: \n            <input\n              value={formValues.story}\n              onChange={onChange}\n              name=\"story\"\n              type=\"text\"\n            />\n          </label>\n          <br />\n\n{/* disabled={disabled} */}\n          <button>Post</button>\n          {/* <button className=\"loginButton\" disabled={registerDisabled}>register\n          </button> */}\n        </form>\n    </div>\n  )\n}\n\nconst mapStateToProps = state => {\n    return {\n        currentUsername: state.currentUsername\n    }\n};\n\nexport default connect(mapStateToProps, {addPost})(NewPostForm);","/Users/mmurph917/Desktop/front-end/ex-pat-journal/src/components/Post.js",["82"],"import React, { useState } from \"react\";\n\nconst initialIsEditing = false;\n\nfunction Post(){\n    const [isEditing, setIsEditing] = useState(initialIsEditing)\n    return(\n        isEditing ? <p>A Post Form</p> \n        \n        :\n        <p>a Completed Post</p>\n    )\n}\n\nexport default Post;","/Users/mmurph917/Desktop/front-end/ex-pat-journal/src/loginschema.js",[],"/Users/mmurph917/Desktop/front-end/ex-pat-journal/src/registerschema.js",[],"/Users/mmurph917/Desktop/front-end/ex-pat-journal/src/actions/index.js",["83"],"import axios from 'axios';\nimport { axiosWithAuth } from './../utils/axiosWithAuth';\n\nexport const API_ALL_POSTS_START = \"API_ALL_POSTS_START\";\nexport const API_GET_ALL_POSTS_SUCCESS = \"API_GET_ALL_POSTS_SUCCESS\";\n\nexport const API_POST_ALL_POSTS_SUCCESS = \"API_POST_ALL_POSTS_SUCCESS\";\nexport const API_ALL_POSTS_FAIL = \"API_ALL_POSTS_FAIL\";\n\nexport const SET_CURRENT_USERNAME = \"SET_CURRENT_USERNAME\";\n\n\n// export const FORM_ERROR = \"FORM_ERROR\";\n\nexport const fetchAllPosts = () => dispatch => {\n    dispatch({type:API_ALL_POSTS_START});\n\n    axiosWithAuth()\n        .get(\"https://expatjournal2021.herokuapp.com/posts\")\n        .then(res => {\n            console.log(res.data);\n            dispatch({type:API_GET_ALL_POSTS_SUCCESS, payload:res.data});\n        })\n        .catch(err => dispatch({type:API_ALL_POSTS_FAIL, payload:err}));\n}\n\n// export const addPost = (currentUsername, image, story) => dispatch => {\n    // const newPost = {\n    //     username: currentUsername,\n    //     image: image,\n    //     story: story\n    //     // story, image\n    // }\n\n\nexport const addPost = (newPost) => dispatch => {\n    // if (!currentUsername || !photo || !story) {\n    //     dispatch({type:FORM_ERROR, payload:\"Photo and story are required, and user must be logged in.\"})\n    // } else {\n        // user_id instead of username?\n    // }\n\n    console.log(newPost);\n    \n    axiosWithAuth()\n        .post(\"https://expatjournal2021.herokuapp.com/posts/\", newPost)\n        .then((res) => {\n            console.log(res);\n            dispatch({type:API_POST_ALL_POSTS_SUCCESS, payload:newPost});\n        })\n        .catch(err => dispatch({type:API_ALL_POSTS_FAIL, payload:err}));\n}\n\nexport const setCurrentUsername = (username) => {\n    return {type:SET_CURRENT_USERNAME, payload:username};\n}\n\n\n// const initialUser = {\n//     fname: '',\n//     lname: '',\n//     email: '',\n//     username: '',\n//     password: '',\n//     posts:[]\n//   }\n  \n//   const initialPost = {\n//     photo:'',\n//     story:''\n//   }","/Users/mmurph917/Desktop/front-end/ex-pat-journal/src/utils/axiosWithAuth.js",[],{"ruleId":"84","replacedBy":"85"},{"ruleId":"86","replacedBy":"87"},{"ruleId":"88","severity":1,"message":"89","line":2,"column":18,"nodeType":"90","messageId":"91","endLine":2,"endColumn":26},{"ruleId":"88","severity":1,"message":"92","line":2,"column":28,"nodeType":"90","messageId":"91","endLine":2,"endColumn":37},{"ruleId":"88","severity":1,"message":"93","line":12,"column":8,"nodeType":"90","messageId":"91","endLine":12,"endColumn":13},{"ruleId":"88","severity":1,"message":"94","line":14,"column":42,"nodeType":"90","messageId":"91","endLine":14,"endColumn":46},{"ruleId":"88","severity":1,"message":"89","line":1,"column":17,"nodeType":"90","messageId":"91","endLine":1,"endColumn":25},{"ruleId":"88","severity":1,"message":"95","line":2,"column":8,"nodeType":"90","messageId":"91","endLine":2,"endColumn":12},{"ruleId":"96","severity":1,"message":"97","line":22,"column":8,"nodeType":"98","endLine":22,"endColumn":10,"suggestions":"99"},{"ruleId":"100","severity":1,"message":"101","line":107,"column":1,"nodeType":"102","messageId":"103","endLine":107,"endColumn":214},{"ruleId":"88","severity":1,"message":"104","line":2,"column":8,"nodeType":"90","messageId":"91","endLine":2,"endColumn":13},{"ruleId":"88","severity":1,"message":"104","line":2,"column":8,"nodeType":"90","messageId":"91","endLine":2,"endColumn":13},{"ruleId":"88","severity":1,"message":"92","line":1,"column":28,"nodeType":"90","messageId":"91","endLine":1,"endColumn":37},{"ruleId":"88","severity":1,"message":"104","line":2,"column":8,"nodeType":"90","messageId":"91","endLine":2,"endColumn":13},{"ruleId":"88","severity":1,"message":"93","line":3,"column":8,"nodeType":"90","messageId":"91","endLine":3,"endColumn":13},{"ruleId":"88","severity":1,"message":"105","line":4,"column":13,"nodeType":"90","messageId":"91","endLine":4,"endColumn":16},{"ruleId":"88","severity":1,"message":"106","line":5,"column":8,"nodeType":"90","messageId":"91","endLine":5,"endColumn":22},{"ruleId":"88","severity":1,"message":"107","line":6,"column":23,"nodeType":"90","messageId":"91","endLine":6,"endColumn":35},{"ruleId":"88","severity":1,"message":"93","line":1,"column":8,"nodeType":"90","messageId":"91","endLine":1,"endColumn":13},"no-native-reassign",["108"],"no-negated-in-lhs",["109"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'axios' is defined but never used.","'Link' is defined but never used.","'Post' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["110"],"no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock","'Posts' is defined but never used.","'yup' is defined but never used.","'registerschema' is defined but never used.","'setIsEditing' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"111","fix":"112"},"Update the dependencies array to be: [props]",{"range":"113","text":"114"},[572,574],"[props]"]